package org.openintents.safecloud.server;

import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Logger;

import org.openintents.safecloud.client.service.CategoryService;
import org.openintents.safecloud.shared.FieldVerifier;
import org.openintents.safecloud.shared.JobCategory;
import org.openintents.safecloud.shared.SafeCategory;
import org.openintents.safecloud.shared.SafeLogin;

import com.google.gwt.user.server.rpc.RemoteServiceServlet;
import com.google.appengine.api.users.User;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;
import com.googlecode.objectify.NotFoundException;
import com.googlecode.objectify.Objectify;
import com.googlecode.objectify.ObjectifyService;
import com.googlecode.objectify.Query;

/**
 * The server side implementation of the RPC service.
 */
@SuppressWarnings("serial")
public class CategoryServiceImpl extends RemoteServiceServlet implements
		CategoryService {

	static {
		ObjectifyService.register(SafeCategory.class);
	}

	public JobCategory categoryServer(JobCategory job) throws IllegalArgumentException, IOException {

		JobCategory result=new JobCategory();
		result.status=JobCategory.Status.ERROR;
		
		if (job==null)
		{
			return result;
		}

		final Logger log = Logger.getLogger(CategoryServiceImpl.class.getName());
		
		log.info("categoryServer");

        UserService userService = UserServiceFactory.getUserService();
        User user = userService.getCurrentUser();

		if (user==null) {
			// user is not logged in
			log.info("user not logged in");
			return result;
		}
		String userId=user.getUserId();

		Objectify ofy = ObjectifyService.begin();

		if (job.type==JobCategory.Type.NEW)
		{
			log.info("NEW job");
			if (job.safeCategory.length==0)
			{
				return result;
			}
			String input=job.safeCategory[0].getName();
			
			// Verify that the input is valid. 
			if (!FieldVerifier.isValidName(input)) {
				// If the input is not valid, throw an IllegalArgumentException back to
				// the client.
				throw new IllegalArgumentException(
						"Name must be at least 4 characters long");
			}
	
			SafeCategory q = ofy.query(SafeCategory.class).filter("userId", userId).filter("name", input).get();
			if (q!=null)
			{
				// name already exists
				log.info("name exists already: "+input);
				job.status=JobCategory.Status.OK;
				return result;
			}

			SafeCategory newCat = new SafeCategory(input);
			newCat.setUserId(userId);
			ofy.put(newCat);
			assert newCat.getId() != null;    // id was autogenerated
			
			log.info("created category id="+newCat.getId());
			result.status=JobCategory.Status.OK;
			result.safeCategory=new SafeCategory[1];
			result.safeCategory[0]=newCat;
			return result;
		} else if (job.type==JobCategory.Type.LIST)
		{
			log.info("LIST job");

			// only query for categories by this user
			Query<SafeCategory> q = ofy.query(SafeCategory.class).filter("userId", userId);

			if ((q!=null) && (q.count()>0)) {
				result.safeCategory=new SafeCategory[q.count()];
				int i=0;
				for (SafeCategory cat: q) {
					log.info("cat="+cat.getName());
					result.safeCategory[i++]=cat;
				}
			}
			result.status=JobCategory.Status.OK;
			return result;
		} else {
			log.info("UNKNOWN job");
		}

		/*
		// Escape data from the client to avoid cross-site script vulnerabilities.
		input = escapeHtml(input);
		userAgent = escapeHtml(userAgent);
		*/
		return null;
	}

	@Override
	public ArrayList<SafeCategory> getCategories() {

		final Logger log = Logger.getLogger(CategoryServiceImpl.class.getName());

		log.info("getCategories");

        UserService userService = UserServiceFactory.getUserService();
        User user = userService.getCurrentUser();

		if (user==null) {
			// user is not logged in
			log.info("user not logged in");
			return null;
		}
		
		String userId=user.getUserId();

		Objectify ofy = ObjectifyService.begin();

		Query<SafeCategory> q = ofy.query(SafeCategory.class).filter("userId", userId);

		if ((q!=null) && (q.count()>0)) {
			ArrayList<SafeCategory> result=new ArrayList<SafeCategory>();
			for (SafeCategory cat: q) {
				log.info("cat="+cat.getName());
				result.add(cat);
			}
			return result;
		}

		return null;
	}

	@Override
	public Boolean deleteCategory(Long id) {
		final Logger log = Logger.getLogger(CategoryServiceImpl.class.getName());

		log.info("deleteCategory: "+id);

        UserService userService = UserServiceFactory.getUserService();
        User user = userService.getCurrentUser();

		if (user==null) {
			// user is not logged in
			log.info("user not logged in");
			return false;
		}

		Objectify ofy = ObjectifyService.begin();

		SafeLogin login = ofy.query(SafeLogin.class).filter("name", user.getNickname()).get();
		if ((login==null) || (login.getId()==null)) {
			log.info("no user found");
			return false;
		}
		
		try {
//			Key<SafeLogin> loginKey = new Key<SafeLogin>(SafeLogin.class, login.getId());
			Query<SafeCategory> q = ofy.query(SafeCategory.class).filter("id", id);
			log.info("q="+q);
			SafeCategory category=q.get();
			log.info("category="+category);
			log.info("category.userId="+category.getUserId());
			log.info("user.userId="+user.getUserId());
			if (category.getUserId().equals(user.getUserId())) {
				log.info("deleting with userId="+user.getUserId());
				ofy.delete(category);
				return true;
			}
		} catch ( NotFoundException e) {
			log.info("exception: "+e.getLocalizedMessage());
		} catch ( NullPointerException e) {
			log.info("exception: "+e.getLocalizedMessage());
		}

		return false;
	}

	@Override
	public SafeCategory getCategory(Long id) {
		final Logger log = Logger.getLogger(CategoryServiceImpl.class.getName());

		log.info("getCategory: "+id);

        UserService userService = UserServiceFactory.getUserService();
        User user = userService.getCurrentUser();

		if (user==null) {
			// user is not logged in
			log.info("user not logged in");
			return null;
		}
		
		return null;
	}

	@Override
	public SafeCategory updateCategory(SafeCategory category) {
		final Logger log = Logger.getLogger(CategoryServiceImpl.class.getName());

		log.info("updateCategory: "+category);

        UserService userService = UserServiceFactory.getUserService();
        User user = userService.getCurrentUser();

		if (user==null) {
			// user is not logged in
			log.info("user not logged in");
			return null;
		}
		
		return null;
	}

	/**
	 * Escape an html string. Escaping data received from the client helps to
	 * prevent cross-site script vulnerabilities.
	 * 
	 * @param html the html string to escape
	 * @return the escaped string
	 */ /*
	private String escapeHtml(String html) {
		if (html == null) {
			return null;
		}
		return html.replaceAll("&", "&amp;").replaceAll("<", "&lt;")
				.replaceAll(">", "&gt;");
	} */
}
